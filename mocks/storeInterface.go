// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	store "github.com/eko/gocache/v2/store"

	time "time"
)

// StoreInterface is an autogenerated mock type for the storeInterface type
type StoreInterface struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx
func (_m *StoreInterface) Clear(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *StoreInterface) Delete(ctx context.Context, key interface{}) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *StoreInterface) Get(ctx context.Context, key interface{}) (interface{}, error) {
	ret := _m.Called(ctx, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields:
func (_m *StoreInterface) GetType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetWithTTL provides a mock function with given fields: ctx, key
func (_m *StoreInterface) GetWithTTL(ctx context.Context, key interface{}) (interface{}, time.Duration, error) {
	ret := _m.Called(ctx, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) time.Duration); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, interface{}) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Invalidate provides a mock function with given fields: ctx, options
func (_m *StoreInterface) Invalidate(ctx context.Context, options store.InvalidateOptions) error {
	ret := _m.Called(ctx, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.InvalidateOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, options
func (_m *StoreInterface) Set(ctx context.Context, key interface{}, value interface{}, options *store.Options) error {
	ret := _m.Called(ctx, key, value, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, *store.Options) error); ok {
		r0 = rf(ctx, key, value, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
